/*
 * complaitsWSO2Soap
 * Soap Complaints  API
 *
 * OpenAPI spec version: 2.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.wso2.client.api.complaitsWSO2Soap;

import org.apache.commons.lang3.StringUtils;
import org.wso2.client.api.ApiCallback;
import org.wso2.client.api.ApiClient;
import org.wso2.client.api.ApiException;
import org.wso2.client.api.ApiResponse;
import org.wso2.client.api.Configuration;
import org.wso2.client.api.Pair;
import org.wso2.client.api.ProgressRequestBody;
import org.wso2.client.api.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.lang.reflect.Type;
import java.util.*;

public class DefaultApi {

    private ApiClient apiClient;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for post
     *
     * @param soAPRequest             SOAP request. (required)
     * @param soAPAction              SOAPAction header for soap 1.1 (optional)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postCall(String soAPRequest, String soAPAction, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = soAPRequest;

        // create path and map variables
        String localVarPath = "/*";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (soAPAction != null) {
            localVarHeaderParams.put("SOAPAction", apiClient.parameterToString(soAPAction));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "text/xml", "application/soap+xml"
        };

        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null)
        {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = Objects.isNull(soAPAction) ? new String[]{"text/xml"} : new String[]{"application/soap+xml"};


        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{};
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postValidateBeforeCall(String soAPRequest, String soAPAction, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'soAPRequest' is set
        if (soAPRequest == null) {
            throw new ApiException("Missing the required parameter 'soAPRequest' when calling post(Async)");
        }


        com.squareup.okhttp.Call call = postCall(soAPRequest, soAPAction, progressListener, progressRequestListener);
        return call;


    }

    /**
     * @param soAPRequest SOAP request. (required)
     * @param soAPAction  SOAPAction header for soap 1.1 (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void post(String soAPRequest, String soAPAction) throws ApiException {
        postWithHttpInfo(soAPRequest, soAPAction);
    }

    public void post(String soAPRequest) throws ApiException {
        postWithHttpInfo(soAPRequest, null);
    }

    public void postSoap12(String soAPRequest) throws ApiException {
        postWithHttpInfo(soAPRequest, "");
    }

    /**
     * @param soAPRequest SOAP request. (required)
     * @param soAPAction  SOAPAction header for soap 1.1 (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> postWithHttpInfo(String soAPRequest, String soAPAction) throws ApiException {
        com.squareup.okhttp.Call call = postValidateBeforeCall(soAPRequest, soAPAction, null, null);
        return apiClient.execute(call);
    }

    /**
     * (asynchronously)
     *
     * @param soAPRequest SOAP request. (required)
     * @param soAPAction  SOAPAction header for soap 1.1 (optional)
     * @param callback    The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postAsync(String soAPRequest, String soAPAction, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postValidateBeforeCall(soAPRequest, soAPAction, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
